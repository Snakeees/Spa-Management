import javax.swing.*;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class AppointmentsPanel  extends javax.swing.JPanel {

    /**
     * Creates new form appointmentsPanel
     */
    public AppointmentsPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private Object[][] getAppointments() {
        Database db = new Database();
        List<List<Object>> cells = new ArrayList<>();
        java.util.Date d=new java.util.Date();
        try {
            ResultSet rs = db.executeQuery("select a.ID, s.ServiceName as service,t.FirstName as therapist,a.AppointmentTime as time from Appointment a, Therapist t,Service s where AppointmentDate=? and a.IsActive=? and t.ID=a.TherapistID and a.ServiceID=s.ID",new java.sql.Date(d.getYear(),d.getMonth(),d.getDate()),true);
            while (rs.next()) {
                int id=rs.getInt("ID");
                String service = rs.getString("service");
                String therapist = rs.getString("therapist");
                String time=rs.getTime("time").toString();

                ArrayList<Object> arr = new ArrayList<>();
                arr.add(id);
                arr.add(service);
                arr.add(therapist);
                arr.add(time);
                arr.add("");
                cells.add(arr);
            }
            Object[][] obj = new Object[cells.size()][4];
            for (int i = 0; i < cells.size(); i++) {
                obj[i][0] = cells.get(i).get(0);
                obj[i][1] = cells.get(i).get(1);
                obj[i][2] = cells.get(i).get(2);
                obj[i][3] = cells.get(i).get(3);
            }
            return obj;

        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;

    }
    @SuppressWarnings("unchecked")
    private void initComponents() {
        Object[][] data = getAppointments();
        javax.swing.table.DefaultTableModel model = new javax.swing.table.DefaultTableModel(
                data,
                new String[]{
                        "ID","SERVICE", "THERAPIST","TIME", "OPTIONS"
                }

        ) {
            @Override
            public Class<?> getColumnClass(int column) {
                return getValueAt(0, column).getClass();
            }
        };
        appointmentsListTable = new javax.swing.JTable(model) {
            @Override
            public void updateUI() {
                super.updateUI();
                setRowHeight(36);
                setAutoCreateRowSorter(true);
                TableColumn column = getColumnModel().getColumn(4);
                System.out.println(column.getHeaderValue());
                column.setCellRenderer(new AppointmentsPanel.ButtonsRenderer());
                column.setCellEditor(new AppointmentsPanel.ButtonsEditor(this));
            }
            @Override
            public boolean isCellEditable(int row, int col) {
                switch (col) {
                    case 4:
                        return true;
                    default:
                        return false;
                }
            }
        };

        addAppointment = new javax.swing.JButton();
        appointmentListTablePane = new javax.swing.JScrollPane();
        searchButton = new javax.swing.JButton();
        appointmentsDetailLabel = new javax.swing.JLabel();
        therapistNameList = new javax.swing.JComboBox<>();
        serviceList = new javax.swing.JComboBox<>();
        therapistLabel = new javax.swing.JLabel();
        serviceLabel = new javax.swing.JLabel();
        therapistLabel.setBackground(new java.awt.Color(216, 235, 243));
        therapistLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        therapistLabel.setText("THERAPIST");

        serviceLabel.setBackground(new java.awt.Color(216, 235, 243));
        serviceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        serviceLabel.setText("SERVICE");

        setBackground(new java.awt.Color(216, 235, 243));

        addAppointment.setBackground(new java.awt.Color(53, 183, 234));
        addAppointment.setText("CREATE");
        addAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentActionPerformed(evt);
            }
        });

        appointmentListTablePane.setBackground(new java.awt.Color(216, 235, 243));
        appointmentListTablePane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        appointmentListTablePane.setInheritsPopupMenu(true);



        appointmentsListTable.setBackground(new java.awt.Color(216, 235, 243));
        appointmentListTablePane.setViewportView(appointmentsListTable);

        searchButton.setBackground(new java.awt.Color(53, 183, 234));
        searchButton.setText("SEARCH");
//        searchButton.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                searchButtonActionPerformed(evt);
//            }
//        });

        appointmentsDetailLabel.setBackground(new java.awt.Color(216, 235, 243));
        appointmentsDetailLabel.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        appointmentsDetailLabel.setText("TODAY'S APPOINTMENT LIST");

        therapistNameList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        therapistNameList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                therapistNameListItemStateChanged(evt);
            }
        });

        serviceList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        serviceList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                serviceListItemStateChanged(evt);
            }
        });

        therapistLabel.setBackground(new java.awt.Color(216, 235, 243));
        therapistLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        therapistLabel.setText("THERAPIST");

        serviceLabel.setBackground(new java.awt.Color(216, 235, 243));
        serviceLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        serviceLabel.setText("SERVICE");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup( layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(serviceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(serviceList, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(149, 149, 149)
                                                .addComponent(therapistLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(33, 33, 33)
                                                .addComponent(therapistNameList, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(248, 248, 248))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(576, 576, 576)
                                                .addComponent(appointmentsDetailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addComponent(addAppointment)
                                .addGap(45, 45, 45))
                        .addGroup(layout.createSequentialGroup()
                                .addGap(0, 32, Short.MAX_VALUE)
                                .addComponent(appointmentListTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 1264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(appointmentsDetailLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(30, 30, 30)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(therapistNameList, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(serviceList, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(therapistLabel)
                                                        .addComponent(serviceLabel))
                                                .addGap(16, 16, 16))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(27, 27, 27)
                                                .addComponent(addAppointment)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addComponent(appointmentListTablePane, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>

    private void addAppointmentActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Container container = getParent();
        getParent().remove(1);
        container.add(new AppointmentPanel(null,true), BorderLayout.CENTER, 1);
        container.validate();
        container.repaint();
    }

    private void serviceListItemStateChanged(java.awt.event.ItemEvent evt) {
        // TODO add your handling code here:
    }

    private void therapistNameListItemStateChanged(java.awt.event.ItemEvent evt) {
        // TODO add your handling code here:
    }


    // Variables declaration - do not modify
    private javax.swing.JScrollPane appointmentListTablePane;
    private javax.swing.JButton addAppointment;
    private javax.swing.JLabel appointmentsDetailLabel;
    private javax.swing.JTable appointmentsListTable;
    private javax.swing.JLabel serviceLabel;
    private JButton searchButton;
    private javax.swing.JComboBox<String> serviceList;
    private javax.swing.JLabel therapistLabel;
    private javax.swing.JComboBox<String> therapistNameList;
    // End of variables declaration



class EditAction extends AbstractAction {
        private final JTable table;

        protected EditAction(JTable table) {
            super("UPDATE");
            this.table = table;
        }

        @Override public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            Container container = getParent();
            getParent().remove(1);
            container.add(new AppointmentPanel((int) o,true), BorderLayout.CENTER, 1);
            container.validate();
            container.repaint();

        }
    }
    class ViewAction extends AbstractAction {
        private final JTable table;

        protected ViewAction(JTable table) {
            super("VIEW");
            this.table = table;
        }

        @Override public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            Object o = table.getModel().getValueAt(row, 0);
            Container container = getParent();
            getParent().remove(1);
            container.add(new AppointmentPanel((int) o,false), BorderLayout.CENTER, 1);
            container.validate();
            container.repaint();

        }
    }
    class CancelAction extends AbstractAction {
        private final JTable table;

        protected CancelAction(JTable table) {
            super("DELETE");
            this.table = table;
        }

        @Override public void actionPerformed(ActionEvent e) {
            int row = table.convertRowIndexToModel(table.getEditingRow());
            int o =(int) table.getModel().getValueAt(row, 0);
            int result = JOptionPane.showOptionDialog(
                    getParent(),
                    "Do you want to CANCEL "+((String)table.getModel().getValueAt(row, 1)+" the APPOINTMENT?"),
                    "Cancel Waring",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,
                    new Object[]{"OK", "Close"},
                    "OK");

            // Check which button was clicked
            if (result == JOptionPane.OK_OPTION) {
                Database db=new Database();
                db.executeUpdate("Update Appointment set IsActive=false where ID=?",o);
                Container container = getParent();
                getParent().remove(1);
                container.add(new AppointmentsPanel(), BorderLayout.CENTER, 1);
                container.validate();
                container.repaint();
            } else if (result == JOptionPane.CANCEL_OPTION) {
                System.out.println("Close button clicked");
            }

        }
    }

    class ButtonsEditor extends AbstractCellEditor implements TableCellEditor {
        protected final SingleItem panel ;
        protected final JTable table;



        private class EditingStopHandler extends MouseAdapter implements ActionListener {
            @Override public void mousePressed(MouseEvent e) {
                Object o = e.getSource();
                if (o instanceof TableCellEditor) {
                    actionPerformed(new ActionEvent(o, ActionEvent.ACTION_PERFORMED, ""));
                } else if (o instanceof JButton) {
                    ButtonModel m = ((JButton) e.getComponent()).getModel();
                    if (m.isPressed() && table.isRowSelected(table.getEditingRow()) && e.isControlDown()) {
                        panel.setBackground(table.getBackground());
                    }
                }
            }

            @Override public void actionPerformed(ActionEvent e) {
                EventQueue.invokeLater(AppointmentsPanel.ButtonsEditor.this::fireEditingStopped);
            }
        }

        protected ButtonsEditor(JTable table) {
            super();
            ArrayList<String> options=new ArrayList<>();
            options.add("View");
            options.add("update");
            options.add("Cancel");
            this.panel=new SingleItem(options);
            this.table = table;
            List<JButton> list = panel.getButtons();
            list.get(2).setAction(new AppointmentsPanel.CancelAction(table));
            list.get(1).setAction(new AppointmentsPanel.EditAction(table));
            list.get(0).setAction(new AppointmentsPanel.ViewAction(table));

            AppointmentsPanel.ButtonsEditor.EditingStopHandler handler = new AppointmentsPanel.ButtonsEditor.EditingStopHandler();
            for (JButton b : list) {
                b.addMouseListener(handler);
                b.addActionListener(handler);
            }
            panel.addMouseListener(handler);
        }

        @Override public Component getTableCellEditorComponent(JTable tbl, Object value, boolean isSelected, int row, int column) {
            panel.setBackground(tbl.getSelectionBackground());
            return panel;
        }

        @Override public Object getCellEditorValue() {
            return "";
        }
    }
    static class ButtonsRenderer implements TableCellRenderer {
        List<String> options = Arrays.asList("view","update","cancel");

        private final SingleItem panel = new SingleItem(options) {
            @Override public void updateUI() {
                super.updateUI();
                setName("Table.cellRenderer");
            }
        };

        @Override public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
            return panel;
        }
    }
}
