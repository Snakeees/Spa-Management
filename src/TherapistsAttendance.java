/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Array;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.Time;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author satyanarayana.y
 */
public class TherapistsAttendance extends javax.swing.JPanel {

    private List<Therapist> therapists = new ArrayList<>();

    private Integer selectedTherapistAttendanceId = null;

    /**
     * Creates new form TherapistsAttendance
     */
    public TherapistsAttendance() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        therpaistNameLabel = new javax.swing.JLabel();
        therapistNameList = new javax.swing.JComboBox<>();
        checkInLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        checkInTime = new javax.swing.JCheckBox();
        checkOutTime = new javax.swing.JCheckBox();
        submit = new javax.swing.JButton();

        setBackground(new java.awt.Color(216, 235, 243));

        therpaistNameLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        therpaistNameLabel.setText("THERAPIST NAME");

        therapistNameList.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        List<Therapist> therapistList = getTherapists(true);
        this.therapists = therapistList;
        for (Therapist therapist : therapistList) {
            therapistNameList.addItem(therapist);
        }

        updateTherapistAttendanceForm(null);

        therapistNameList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                therapistNameListActionPerformed(evt);
            }
        });

        checkInLabel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        checkInLabel.setText("CHECKIN TIME");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("CHECKOUT TIME");

        checkInTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInTimeActionPerformed(evt);
            }
        });

        checkOutTime.setActionCommand("");
        checkOutTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutTimeActionPerformed(evt);
            }
        });

        submit.setBackground(new java.awt.Color(53, 183, 234));
        submit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submit.setText("SUBMIT");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(419, 419, 419)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(therpaistNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149)
                        .addComponent(therapistNameList, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(checkInLabel))
                            .addGap(177, 177, 177)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(checkInTime)
                                .addComponent(checkOutTime)))))
                .addContainerGap(229, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(therpaistNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(therapistNameList, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkInLabel)
                    .addComponent(checkInTime))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(checkOutTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(74, 74, 74)
                .addComponent(submit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(207, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void therapistNameListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_therapistNameListActionPerformed
        Therapist therapist = (Therapist) therapistNameList.getSelectedItem();
        if(therapist != null){
            updateTherapistAttendanceForm(therapist.getId());
        }

    }//GEN-LAST:event_therapistNameListActionPerformed

    private void updateTherapistAttendanceForm(Integer therapistId){
        Therapist therapist = null;
        if(this.therapists != null && this.therapists.size() > 0){
            if(therapistId != null){
                for(Therapist therapistLoc : therapists) {
                    if(therapistLoc.getId() == therapistId) {
                        therapist = therapistLoc;
                    }
                }
            } else{
                therapist = (Therapist) therapistNameList.getSelectedItem();
                if(therapist != null){
                    therapistId = therapist.getId();
                }
            }
        }
        if(therapist != null){
            TherapistAttendance therapistAttendance = getTherapistAttendanceByCurrentDate(therapistId);
            if(therapistAttendance != null){
                this.selectedTherapistAttendanceId  = therapistAttendance.getId();
                if(therapistAttendance.getCheckinTime() != null){
                    checkInTime.setSelected(true);
                } else{
                    checkInTime.setSelected(false);
                }
                if(therapistAttendance.getCheckoutTime() != null){
                    checkOutTime.setSelected(true);
                }else{
                    checkOutTime.setSelected(false);
                }
                therapistNameList.setSelectedItem(therapist);
            } else{
                this.selectedTherapistAttendanceId  = null;
                checkInTime.setSelected(false);
                checkOutTime.setSelected(false);
                therapistNameList.setSelectedItem(therapist);
            }
        }
    }

    private void checkInTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkInTimeActionPerformed

    private void checkOutTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_checkOutTimeActionPerformed

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        Therapist therapist = (Therapist) therapistNameList.getSelectedItem();
        LocalTime now = LocalTime.now();
        Time currentTime = Time.valueOf(now);
        LocalDate localDate = LocalDate.now();
        Date currentDate = Date.valueOf(localDate);
        try {
            Database database = new Database();
            if (this.selectedTherapistAttendanceId != null) {
                TherapistAttendance therapistsAttendance = getTherapistAttendanceByCurrentDate(therapist.getId());
                if(therapistsAttendance != null) {
                    if (checkInTime.isSelected() && therapistsAttendance.getCheckinTime() == null) {
                        therapistsAttendance.setCheckinTime(currentTime);
                    } else if (!checkInTime.isSelected()) {
                        therapistsAttendance.setCheckinTime(null);
                    }
                    if (checkOutTime.isSelected() && therapistsAttendance.getCheckoutTime() == null) {
                        therapistsAttendance.setCheckoutTime(currentTime);
                    } else if (!checkOutTime.isSelected()) {
                        therapistsAttendance.setCheckoutTime(null);
                    }
                    database.executeUpdate("update TherapistAttendance set checkIntime=? , checkouttime=?, date=? where ID=? ;", therapistsAttendance.getCheckinTime(), therapistsAttendance.getCheckoutTime(), therapistsAttendance.getDate(), this.selectedTherapistAttendanceId);
                    JOptionPane.showMessageDialog(this, "Updated attendance details successfully");
                }
            } else {
                TherapistAttendance therapistAttendance = new TherapistAttendance();
                therapistAttendance.setTherapistId(therapist.getId());
                if (checkInTime.isSelected()) {
                    therapistAttendance.setCheckinTime(currentTime);
                } else {
                    therapistAttendance.setCheckinTime(null);
                }
                if (checkOutTime.isSelected()) {
                    therapistAttendance.setCheckoutTime(currentTime);
                } else {
                    therapistAttendance.setCheckoutTime(null);
                }
                therapistAttendance.setDate(currentDate);
                database.executeUpdate("INSERT INTO TherapistAttendance ( therapistid, checkintime, checkouttime, date) VALUES(?,?,?,?)", therapistAttendance.getTherapistId(), therapistAttendance.getCheckinTime(), therapistAttendance.getCheckoutTime(), therapistAttendance.getDate());
                JOptionPane.showMessageDialog(this, "Added attendance details successfully");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel checkInLabel;
    private javax.swing.JCheckBox checkInTime;
    private javax.swing.JCheckBox checkOutTime;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton submit;
    private javax.swing.JComboBox<Therapist> therapistNameList;
    private javax.swing.JLabel therpaistNameLabel;
    // End of variables declaration//GEN-END:variables

    private TherapistAttendance getTherapistAttendanceByCurrentDate(int therapistId) {
        Database db = new Database();
        List<TherapistAttendance> therapists = new ArrayList<>();
        try {
            ResultSet rs = db.executeQuery("select * from TherapistAttendance where therapistID= ? and date = CURDATE() ", therapistId);
            while (rs.next()) {
                return new TherapistAttendance(rs.getInt("ID"),
                        rs.getInt("TherapistID"),
                        rs.getDate("date"),
                        rs.getTime("CheckinTime"),
                        rs.getTime("CheckoutTime")
                        );
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private List<Therapist> getTherapists(boolean isActive) {
        Database db = new Database();
        List<Therapist> therapists = new ArrayList<>();
        try {
            ResultSet rs = db.executeQuery("select * from Therapist where isActive = ?", isActive);
            while (rs.next()) {
                therapists.add(new Therapist(rs.getInt("ID"),rs.getString("firstName")));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return therapists;
    }
}
